{% extends '@pulsar/pulsar/components/tab.html.twig' %}
{% import 'helpers/example.html.twig' as docs %}

{% block tab_content %}
<div class="report">
    <p class="lede">Add small overlays of content for super concise functions, or toggleable options.</p>
    
    {{ docs.heading('h2', 'Basic usage') }}

    {{ docs.example({ 
        twig: "
{{
    html.link({
        'href': '#one',
        'label': 'Click to toggle popover',
        'data-toggle': 'popover',
        'data-title': 'Popover Title',
        'data-content': 'This is the popover content. It can (optionally) contain <strong><u>HTML</u></strong>',
        'data-html': true
    })
}}
    " }) }}

    {{ docs.heading('h2', 'Helper options') }}

    <p>You can configure this helper using the <a href="../guides/using-helpers#common-options">common helper options</a>, the following options are specific to this helper.</p>

    <table class="table table--full">
        <thead>
            <tr>
                <th>Option</th>
                <th>Type</th>
                <th>Default</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><code>data-html</code></td>
                <td>boolean</td>
                <td><code>false</code></td>
                <td>Parse the <code>data-content</code> as HTML instead of plain text. Avoid doing this if your popover may contain user-supplied content as this could be used to create an XSS security vulnerability</td>
            </tr>
            <tr>
                <td><code>data-placement</code></td>
                <td>string</td>
                <td><code>right</code></td>
                <td>Where to place the popover, can be <code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code>, <code>auto</code><br />
                When <code>auto</code> is specified, it will dynamically reorient the popover. For example, if placement is <code>auto left</code>, the tooltip will display to the left when possible, otherwise it will display right</td>
            </tr>
            <tr>
                <td><code>data-selector</code></td>
                <td>string</td>
                <td><code>empty</code></td>
                <td>If a selector is provided, tooltip objects will be delegated to the specified targets. in practice, this is used to enable dynamic HTML content to have popovers added</td>
            </tr>
            <tr>
                <td><code>data-trigger</code></td>
                <td>string</td>
                <td><code>click</code></td>
                <td>How the popover is triggered, can be <code>click</code>, <code>hover</code>, <code>focus</code>, <code>manual</td>
            </tr>
            <tr>
                <td><code>data-title</code></td>
                <td>string</td>
                <td><code>empty</code></td>
                <td>Default title value if title attribute is not present</td>
            </tr>
            <tr>
                <td><code>data-content</code></td>
                <td>string</td>
                <td><code>empty</code></td>
                <td>The content to display within the popover, can contain HTML if the <code>data-html</code> option is <code>true</code></td>
            </tr>
            <tr>
                <td><code>data-container</code></td>
                <td>string</td>
                <td><code>empty</code></td>
                <td>Appends the popover to a specific element. Example: <code>body</code>. This option is particularly useful in that it allows you to position the popover in the flow of the document near the triggering element - which will prevent the popover from floating away from the triggering element during a window resize</td>
            </tr>
        </tbody>
    </table>

    {{ docs.heading('h2', 'Clickovers') }}

    <p>A clickover is a variation of popovers where the popover will be closed when the user clicks anywhere else on the page (popovers require the same toggle to be clicked). To use a clickover instead of a popover, use the <code>rel="clickover"</code> attribute instead of <code>data-toggle="popover"</code>.</p>

    {{ docs.example({ 
        twig: "
{{
    html.link({
        'href': '#two',
        'label': 'Click to toggle popover',
        'rel': 'clickover',
        'data-title': 'Popover Title',
        'data-content': 'This is a clickover, it will close if you click anywhere outside the popover area.',
    })
}}
    " }) }}

    {{ docs.heading('h2', 'Popovers on disabled elements') }}

    <p>To add a popover to a disabled element, either using the <code>disabled</code> attribute or <code>.disabled</code> class, put the element inside of a containing element, like a <code>&lt;div&gt;</code> or <code>&lt;span&gt;</code> and apply the popover to that containing element instead.</p>

    {{ docs.example({ 
        twig: "
<span data-toggle=\"popover\" data-title=\"Popover Title\" data-content=\"Popover content\">
{{
    html.link({
        'href': '#threee',
        'class': 'is-disabled',
        'label': 'Click to toggle popover'
    })
}}
</span>
    " }) }}

</div>
{% endblock tab_content %}
{% block tab_sidebar %}
    <h4>On this page</h4>
    <ul class="page-nav">
        <li><a href="#basic-usage">Basic usage</a></li>
        <li><a href="#helper-options">Helper options</a></li>
        <li><a href="#actions">Actions</a></li>
        <li><a href="#actions-position">Actions position</a>
            <ul>
                <li><a href="#left">Left</a></li>
                <li><a href="#inline">Inline</a></li>
                <li><a href="#center">Center</a></li>
                <li><a href="#right">Right</a></li>
            </ul>
        </li>
    </ul>
{% endblock tab_sidebar %}
