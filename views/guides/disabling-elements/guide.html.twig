{% extends '@pulsar/pulsar/components/tab.html.twig' %}
{% import 'helpers/example.html.twig' as docs %}

{% block tab_content %}
<div class="report">
    <p class="lede">Disabling an element requires adding the appropriate attribute for the browser and any assistive device to recognise the element as being disabled, as well as a class to toggle the disabled styling of a given element.</p>

    <p>{{ html.icon('info-sign') }} Pulsar helpers will automatically use the correct attribute to use when you add <code>'disabled': true</code> to your helper options.</p>

    {{ docs.heading('h2', 'The disabled attribute') }}

    <p>The following elements are the only ones which support the <code>disabled</code> attribute. You do not need to add <code>aria-diasbled</code> for these.</p>

    <ul>
        <li><code>&lt;button&gt;</code></li>
        <li><code>&lt;fieldset&gt;</code></li>
        <li><code>&lt;input&gt;</code></li>
        <li><code>&lt;optgroup&gt;</code></li>
        <li><code>&lt;option&gt;</code></li>
        <li><code>&lt;select&gt;</code></li>
        <li><code>&lt;textarea&gt;</code></li>
    </ul>

    {{ docs.heading('h2', 'The aria-disabled attribute') }}

    <p>If an element doesn’t support <code>disabled</code>, you should use <code>aria-disabled="true"</code> to indicate to assistive technologies that an element is no longer interactive.</p>

    {{ docs.heading('h2', 'Disabled visual style') }}

    <p>Elements consistently use the <code>.is-disabled</code> class to visually represent the disabled state of the element.</p>

    {{ docs.heading('h2', 'Disabling on load') }}
    
    <p>Add the <code>'disabled': true</code> option to most helpers to disable the element, the required attributes and class should be added automatically.</p>

    {{ docs.example({
        screenreader: "",
        twig: "
{{
    html.button({ 
        'label': 'Button',
        'disabled': true
    })
}}
{{
    html.link({
        'href': 'http://www.jadu.net',
        'label': 'Jadu',
        'disabled': true
    })
}}
    " }) }}

    {{ docs.heading('h2', 'Disabling with JavaScript') }}

    <p>If you’re writing javascript to disable/enable an element you must toggle both the correct attribute and class to maintain the support for assistive devices as well as compliance with relevant accessibility guidelines.</p>

<pre><code lang="javascript">if ($elementSupportsDisable) {
    $('#elementToDisable').prop('disabled', true).addClass('.is-disabled');
} else {
    $('#elementToDisable').attr('aria-disabled', 'true').addClass('.is-disabled');
}</code></pre>

    {{ docs.heading('h2', 'Tooltips on disabled elements') }}

    <p>If an element is <code>disabled</code>, you will need to use a wrapper element (<code>&lt;span&gt;</code> or <code>&lt;div&gt;</code>) made focuseable with <code>tabindex="0"</code>, and attach the tooltip to that element. Elements with the disabled attribute aren't interactive, meaning users cannot focus, hover, or click them to trigger a Tooltip.</p>

    <p>{{ html.icon('universal-access', {'class': 'icon--primary'}) }} The tooltip will not be read by screenreaders and therefore this pattern should be avoided.</p>

    {{ docs.example({
        screenreader: 'Disabled button, group, you are currently on a button, this item is dimmed',
        twig: '
<div data-tippy-content="Can’t touch this" tabindex="0" class="u-display-inline-block">
  {{ 
    html.button({
      "label": "Disabled Button",
      "disabled": true
    })
  }}
</div>
    ' }) }}

</div>

{% endblock tab_content %}
{% block tab_sidebar %}
    {{ docs.toc() }}
{% endblock tab_sidebar %}