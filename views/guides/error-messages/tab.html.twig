{% extends '@pulsar/pulsar/components/tab.html.twig' %}
{% import 'helpers/example.html.twig' as docs %}

{% block tab_content %}
<div class="report">
    <p class="lede">Error messages are a critical user interface component, they must explain to people that something unexpected has occurred and how to resolve it.</p>

    {{ docs.heading('h2', 'General guidance') }}

    <p>The choice of language used in an error message should be seen as a design task as important as anything else, the choice of wording is crucial if the user has any chance of resolving an error condition.</p>

    <p>Error messages should:</p>

    <ul>
        <li>Be visually distinct, obvious and easy to spot</li>
        <li>Be placed close to the source of the problem</li>
        <li>Use plain language</li>
        <li>Be brief</li>
    </ul>

    <p>Error messages should not:</p>

    <ul>
        <li>be vague, such as saying ‘a problem occurred’</li>
        <li>Use technical language, like ‘transcoding failed’</li>
        <li>say ‘sorry’, because it does not help fix the problem</li>
        <li>attempt to use humour, like saying 'oops, something went wrong’</li>
    </ul>

    {{ docs.heading('h2', 'General errors') }}

    {{ docs.heading('h3', 'Page title') }}

    <p>The <code>&lt;title&gt;</code> attribute of the page should be prepended with the word <code>Error</code>, as well as acting as a visual indicator that the tab contains an error, it is also the first word that a screen reader will announce when the page has loaded, informing screen reader users that something has gone wrong.</p>

    <p>The title attribute can be set on page load in the title block, you'll need to add the related logic to update this based on a form validation failure.</p>

<pre><code lang="twig">&#123;% block title %&#125;
    Error - Jadu Control Center - Create Document
&#123;% endblock %&#125;</code></pre>

    {{ docs.heading('h3', 'Flash message') }}

    <p>Flash messages are displayed at the top of the user interface and will often be the first indication that a page contains an error. A flash message should not be the only method used to communicate an error.</p>
    
    <figure class="wireframe wireframe--small">
        <img src="/views/guides/error-messages/img/flash-message.png" alt="Screenshot showing the position of flash error messages" />
        <figcaption>The flash message will be positioned near the top of the UI</figcaption>
    </figure>

    <p>Refer to the <a href="/components/flash-message">flash message documentation</a> to learn how to create flash messages.</p>

    {{ docs.heading('h2', 'Form errors') }}

    <p>Forms can be long and complicated, it is therefore important that all errors are clearly listed and highlighted so that the user understands what went wrong and how to fix it.</p>

    <p>A combination of techniques should be used when dealing with form errors, a <a href="#flash-summary">flash summary</a> should be provided at the top of the page, and each invalid field should be marked as an <a href="#invalid-fields">invalid field</a>.</p>

    {{ docs.heading('h3', 'Invalid fields') }}

    <p>Form fields should be individually given descriptive error text which explains in clear, concise language, what the person filling in this form needs to do to resolve the error for this specific field.</p>

    <p>If the person is expected to provide information in a specific format, such as an email address, date or postcode, an example should be provided either through help text, or as part of the error message.</p>

    <p>Each form helper will allow the error message to be defined by the <code>error</code> helper option. If you're using HTML you will have to refer to each <a data-toggle-nav="#components">form component's</a> documentation for the correct combination of markup and classes to use.</p>

    <p>Avoid messages like:</p>

    <ul>
        <li>‘Field cannot be empty’</li>
        <li>‘This field is required’</li>
        <li>’Invalid value’</li>
        <li>’Answer the question’</li>
    </ul>

    {{ docs.example({
        screenreader: 'First name, invalid data, edit text. Enter your first name',
        code: false,
        twig: "
{{
    form.text({
        'label': 'First name',
        'id': 'firstName', 
        'name': 'firstName',
        'error': 'Enter your first name'
    })
}}

{{
    form.text({
        'label': 'Email address',
        'id': 'email', 
        'name': 'email',
        'value': 'my-email at hotmail dot com',
        'error': 'Enter an email address in the correct format, like name@example.com'
    })
}}
    " }) }}

    {{ docs.heading('h4', 'Accessibility considerations') }}

    <p>Pulsar twig helpers automatically include the required accessibility features and should be used as much as possible, if you <em>have</em> to use plain HTML then your implementation <strong>must</strong> include the same accessibility features. Failure to do this will result in a user interface that may fail an accessibility audit and not provide a sufficient experience for the people using our software.</p>

    <p>If you are dynamically toggling the state of an input between valid and invalid without a page refresh, you <strong>must</strong> ensure you’re toggling the relevant combination of classes and aria attributes where applicable.</p>

    {{ docs.heading('h4', 'Colour') }}

    <p>When a form field is in error state, the label, the field border, and the error message should all use the danger colour. The shade of red used in the <code>danger</code> colour contrast is WCAG 2.1 AA compliant. If you're using the correct combination of markup and error classes as described by the component documentation this should be styled automatically, however if you need to style somthing custom then you can fetch the danger colour from the palette.</p>

<pre><code>.example {
    color: colour(danger);
}
</code></pre>

    {{ docs.heading('h4', 'Visual indicator') }}

    <p>All form field errors should be visually marked with the <code>warning</code> icon {{ html.icon('warning') }} so that colour is not the only method of differentiating between an error and regular help text.</p>

    <p>For regular form layouts, the error message should be placed immediately underneath the related input. If additional help text is required this should be placed underneath the error message.</p>

    {{ docs.example({
        screenreader: 'First name, invalid data, edit text. Enter your first name',
        twig: "
{{
    form.text({
        'label': 'Email address',
        'id': 'email', 
        'name': 'email',
        'value': 'my-email at hotmail dot com',
        'error': 'Enter an email address in the correct format',
        'help': 'e.g. name@example.com'
    })
}}
    " }) }}

    {{ docs.heading('h3', 'Aria-invalid') }}

    <p>Invalid fields should have the <code>aria-invalid="true"</code> attribute applied, this allows assistive technologies to correctly interpret and announce the state of an invalid field.</p>

    <p>It is presumed any plain HTML implementations use an appropriate label matched to the input with <code>aria-describedby</code>.



</div>
{% endblock tab_content %}
{% block tab_sidebar %}
    <h4>On this page</h4>
    <ul class="page-nav">
        <li><a href="#general-guidance">General guidance</a></li>
        <li><a href="#general-errors">General errors</a>
            <ul>
                <li><a href="#page-title">Page title</a></li>
                <li><a href="#flash-message">Flash message</a></li>
            </ul>
        </li>
        <li><a href="#error-message-types">Form errors</a>
            <ul>
                <li><a href="#flash-summary">Flash summary</a></li>
                <li><a href="#invalid-fields">Invalid fields</a>
                    <ul>
                        <li><a href="#accessibility-considerations">Accessibility considerations</a></li>
                        <li><a href="#colour">Colour</a></li>
                        <li><a href="#visual-indicator">Visual indicator</a></li>
                    </li>
                </li>
            </li>
        </li>
    </ul>
{% endblock tab_sidebar %}